version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: greensteel-gateway
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=GreenSteel Gateway
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - ./app:/app
      - /app/__pycache__
    networks:
      - greensteel-network
    depends_on:
      - user-service
      - product-service
      - order-service
      - payment-service
      - notification-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: greensteel-user-service
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=user-service
      - PORT=8001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/user_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./services/user-service:/app
      - /app/__pycache__
    networks:
      - greensteel-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: greensteel-product-service
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=product-service
      - PORT=8002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/product_db
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./services/product-service:/app
      - /app/__pycache__
    networks:
      - greensteel-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: greensteel-order-service
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=order-service
      - PORT=8003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/order_db
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - ./services/order-service:/app
      - /app/__pycache__
    networks:
      - greensteel-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: greensteel-payment-service
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=payment-service
      - PORT=8004
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/payment_db
      - REDIS_URL=redis://redis:6379/3
    volumes:
      - ./services/payment-service:/app
      - /app/__pycache__
    networks:
      - greensteel-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: greensteel-notification-service
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=notification-service
      - PORT=8005
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/notification_db
      - REDIS_URL=redis://redis:6379/4
    volumes:
      - ./services/notification-service:/app
      - /app/__pycache__
    networks:
      - greensteel-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: greensteel-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=user_db,product_db,order_db,payment_db,notification_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - greensteel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: greensteel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - greensteel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: greensteel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - greensteel-network
    depends_on:
      - gateway
    restart: unless-stopped
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: greensteel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - greensteel-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: greensteel-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - greensteel-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  greensteel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
