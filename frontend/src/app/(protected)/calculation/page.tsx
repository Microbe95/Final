'use client';

import React, { useState, useEffect } from 'react';
import Button from '@/components/atomic/atoms/Button';
import Input from '@/components/atomic/atoms/Input';
// StatusBadge has different props, so we'll use simple spans
import { useCalculationAPI } from '@/hooks/useCalculationAPI';
import type {
  FuelCalculationRequest,
  MaterialCalculationRequest,
  PrecursorData,
  CBAMCalculationRequest,
  FuelCalculationResponse,
  MaterialCalculationResponse,
  CBAMCalculationResponse,
  CalculationStatsResponse
} from '@/hooks/useCalculationAPI';

// ============================================================================
// üßÆ CBAM Í≥ÑÏÇ∞ ÌéòÏù¥ÏßÄ
// ============================================================================

export default function CalculationPage() {
  const [activeTab, setActiveTab] = useState<'fuel' | 'material' | 'precursor' | 'cbam' | 'stats'>('fuel');
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null);

  // API Hooks
  const {
    calculateFuelEmission,
    calculateMaterialEmission,
    getPrecursorList,
    savePrecursorBatch,
    calculateCBAM,
    getCalculationStats,
    getCalculationHistory
  } = useCalculationAPI();

  // Form States
  const [fuelForm, setFuelForm] = useState<FuelCalculationRequest>({
    fuel_name: '',
    fuel_amount: 0
  });

  const [materialForm, setMaterialForm] = useState<MaterialCalculationRequest>({
    material_name: '',
    material_amount: 0
  });

  const [precursorForm, setPrecursorForm] = useState<PrecursorData>({
    user_id: '',
    precursor_name: '',
    emission_factor: 0,
    carbon_content: 0
  });

  const [cbamForm, setCbamForm] = useState<CBAMCalculationRequest>({
    product_name: '',
    fuel_emissions: 0,
    material_emissions: 0,
    precursor_emissions: 0
  });

  // Results
  const [results, setResults] = useState<{
    fuel?: FuelCalculationResponse;
    material?: MaterialCalculationResponse;
    cbam?: CBAMCalculationResponse;
    stats?: CalculationStatsResponse;
  }>({});

  const [precursorList, setPrecursorList] = useState<PrecursorData[]>([]);

  // ============================================================================
  // üî• Ïó∞Î£å Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleFuelCalculation = async () => {
    if (!fuelForm.fuel_name || fuelForm.fuel_amount <= 0) {
      setToast({ message: 'Ïó∞Î£åÎ™ÖÍ≥º Ïó∞Î£åÎüâÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateFuelEmission(fuelForm);
      
      if (result) {
        setResults(prev => ({ ...prev, fuel: result }));
        setToast({ message: 'Ïó∞Î£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'Ïó∞Î£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Fuel calculation error:', error);
      setToast({ message: 'Ïó∞Î£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üß± ÏõêÎ£å Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleMaterialCalculation = async () => {
    if (!materialForm.material_name || materialForm.material_amount <= 0) {
      setToast({ message: 'ÏõêÎ£åÎ™ÖÍ≥º ÏõêÎ£åÎüâÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateMaterialEmission(materialForm);
      
      if (result) {
        setResults(prev => ({ ...prev, material: result }));
        setToast({ message: 'ÏõêÎ£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'ÏõêÎ£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Material calculation error:', error);
      setToast({ message: 'ÏõêÎ£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üéØ CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleCBAMCalculation = async () => {
    if (!cbamForm.product_name) {
      setToast({ message: 'Ï†úÌíàÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateCBAM(cbamForm);
      
      if (result) {
        setResults(prev => ({ ...prev, cbam: result }));
        setToast({ message: 'CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'CBAM Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('CBAM calculation error:', error);
      setToast({ message: 'CBAM Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üî¨ Ï†ÑÍµ¨Î¨ºÏßà Í¥ÄÎ¶¨
  // ============================================================================
  
  const handlePrecursorSave = async () => {
    if (!precursorForm.user_id || !precursorForm.precursor_name) {
      setToast({ message: 'ÏÇ¨Ïö©Ïûê IDÏôÄ Ï†ÑÍµ¨Î¨ºÏßàÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await savePrecursorBatch([precursorForm]);
      
      if (result) {
        setToast({ message: `Ï†ÑÍµ¨Î¨ºÏßàÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§: ${result.message}`, type: 'success' });
        // Ìèº Ï¥àÍ∏∞Ìôî
        setPrecursorForm({
          user_id: precursorForm.user_id, // ÏÇ¨Ïö©Ïûê IDÎäî Ïú†ÏßÄ
          precursor_name: '',
          emission_factor: 0,
          carbon_content: 0
        });
      } else {
        setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Precursor save error:', error);
      setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handlePrecursorLoad = async () => {
    if (!precursorForm.user_id) {
      setToast({ message: 'ÏÇ¨Ïö©Ïûê IDÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await getPrecursorList(precursorForm.user_id);
      
      if (result) {
        setPrecursorList(result.precursors);
        setToast({ message: `${result.total_count}Í∞úÏùò Ï†ÑÍµ¨Î¨ºÏßàÏùÑ Ï°∞ÌöåÌñàÏäµÎãàÎã§.`, type: 'success' });
      } else {
        setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Precursor load error:', error);
      setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üìä ÌÜµÍ≥Ñ Î°úÎìú
  // ============================================================================
  
  const loadStats = async () => {
    try {
      const result = await getCalculationStats();
      if (result) {
        setResults(prev => ({ ...prev, stats: result }));
      }
    } catch (error) {
      console.error('Stats load error:', error);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌÜµÍ≥Ñ Î°úÎìú
  useEffect(() => {
    if (activeTab === 'stats') {
      loadStats();
    }
  }, [activeTab]);

  // ============================================================================
  // üé® Î†åÎçîÎßÅ Ìï®ÏàòÎì§
  // ============================================================================

  const renderFuelCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üî• Ïó∞Î£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ïó∞Î£åÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={fuelForm.fuel_name}
              onChange={(e) => setFuelForm(prev => ({ ...prev, fuel_name: e.target.value }))}
              placeholder="Ïòà: Ï≤úÏó∞Í∞ÄÏä§"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ïó∞Î£åÎüâ (ÌÜ§) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={fuelForm.fuel_amount}
              onChange={(e) => setFuelForm(prev => ({ ...prev, fuel_amount: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleFuelCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Ïó∞Î£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.fuel && (
          <div className="mt-6 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
            <h4 className="font-semibold text-green-400 mb-3">üî• Ïó∞Î£å Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ïó∞Î£åÎ™Ö:</strong> {results.fuel.fuel_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.fuel.emission?.toFixed(2)} tCO‚ÇÇ</p>
              <p><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {results.fuel.emission_factor} tCO‚ÇÇ/TJ</p>
              <p><strong>ÏàúÎ∞úÏó¥Îüâ:</strong> {results.fuel.net_calorific_value} TJ/Gg</p>
              <p><strong>Í≥ÑÏÇ∞Ïãù:</strong> {results.fuel.calculation_formula}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderMaterialCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üß± ÏõêÎ£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏõêÎ£åÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={materialForm.material_name}
              onChange={(e) => setMaterialForm(prev => ({ ...prev, material_name: e.target.value }))}
              placeholder="Ïòà: Ï≤†Í¥ëÏÑù"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏõêÎ£åÎüâ (ÌÜ§) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={materialForm.material_amount}
              onChange={(e) => setMaterialForm(prev => ({ ...prev, material_amount: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleMaterialCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          ÏõêÎ£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.material && (
          <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <h4 className="font-semibold text-blue-400 mb-3">üß± ÏõêÎ£å Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>ÏõêÎ£åÎ™Ö:</strong> {results.material.material_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.material.emission?.toFixed(2)} tCO‚ÇÇ</p>
              <p><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {results.material.emission_factor} tCO‚ÇÇ/ÌÜ§</p>
              <p><strong>Í≥ÑÏÇ∞Ïãù:</strong> {results.material.calculation_formula}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderPrecursorManagement = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üî¨ Ï†ÑÍµ¨Î¨ºÏßà Í¥ÄÎ¶¨</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">ÏÇ¨Ïö©Ïûê ID <span className="text-red-500">*</span>
            </label>
            <Input
              value={precursorForm.user_id}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, user_id: e.target.value }))}
              placeholder="ÏÇ¨Ïö©Ïûê ID"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†ÑÍµ¨Î¨ºÏßàÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={precursorForm.precursor_name}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, precursor_name: e.target.value }))}
              placeholder="Ïòà: ÏÑùÌöåÏÑù"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Î∞∞Ï∂úÍ≥ÑÏàò            </label>
            <Input
              type="number"
              value={precursorForm.emission_factor}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, emission_factor: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">ÌÉÑÏÜåÌï®Îüâ            </label>
            <Input
              type="number"
              value={precursorForm.carbon_content}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, carbon_content: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <div className="flex gap-3">
          <Button
            onClick={handlePrecursorSave}
            loading={loading}
            variant="primary"
            className="flex-1 md:flex-none"
          >
            Ï†ÑÍµ¨Î¨ºÏßà Ï†ÄÏû•
          </Button>
          
          <Button
            onClick={handlePrecursorLoad}
            loading={loading}
            variant="secondary"
            className="flex-1 md:flex-none"
          >
            Ï†ÑÍµ¨Î¨ºÏßà Ï°∞Ìöå
          </Button>
        </div>

        {/* Ï†ÑÍµ¨Î¨ºÏßà Î™©Î°ù */}
        {precursorList.length > 0 && (
          <div className="mt-6">
            <h4 className="font-semibold text-white mb-3">Ï†ÄÏû•Îêú Ï†ÑÍµ¨Î¨ºÏßà</h4>
            <div className="space-y-2">
              {precursorList.map((precursor, index) => (
                <div key={index} className="p-3 bg-gray-800 border border-gray-700 rounded-lg">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                    <div><strong>Ïù¥Î¶Ñ:</strong> {precursor.precursor_name}</div>
                    <div><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {precursor.emission_factor}</div>
                    <div><strong>ÌÉÑÏÜåÌï®Îüâ:</strong> {precursor.carbon_content}</div>
                    <div><strong>ÏÇ¨Ïö©Ïûê:</strong> {precursor.user_id}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderCBAMCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üéØ CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†úÌíàÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={cbamForm.product_name}
              onChange={(e) => setCbamForm(prev => ({ ...prev, product_name: e.target.value }))}
              placeholder="Ïòà: Ï≤†Í∞ï Ï†úÌíà"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ïó∞Î£å Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)            </label>
            <Input
              type="number"
              value={cbamForm.fuel_emissions}
              onChange={(e) => setCbamForm(prev => ({ ...prev, fuel_emissions: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">ÏõêÎ£å Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)            </label>
            <Input
              type="number"
              value={cbamForm.material_emissions}
              onChange={(e) => setCbamForm(prev => ({ ...prev, material_emissions: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)            </label>
            <Input
              type="number"
              value={cbamForm.precursor_emissions}
              onChange={(e) => setCbamForm(prev => ({ ...prev, precursor_emissions: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleCBAMCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞
        </Button>

        {results.cbam && (
          <div className="mt-6 p-4 bg-purple-500/10 border border-purple-500/30 rounded-lg">
            <h4 className="font-semibold text-purple-400 mb-3">üéØ CBAM Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ï†úÌíàÎ™Ö:</strong> {results.cbam.product_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.cbam.emission?.toFixed(2)} tCO‚ÇÇeq</p>
              <p><strong>CBAM ÏöîÏú®:</strong> ‚Ç¨{results.cbam.cbam_rate}/tCO‚ÇÇeq</p>
              <p><strong>CBAM ÎπÑÏö©:</strong> ‚Ç¨{results.cbam.cbam_cost?.toFixed(2)}</p>
              {results.cbam.breakdown && (
                <div className="mt-3 pt-3 border-t border-purple-500/30">
                  <p className="font-semibold mb-1">Î∞∞Ï∂úÎüâ ÏÑ∏Î∂ÄÏÇ¨Ìï≠:</p>
                  <p>‚Ä¢ Ïó∞Î£å Î∞∞Ï∂úÎüâ: {results.cbam.breakdown.fuel_emissions.toFixed(2)} tCO‚ÇÇ</p>
                  <p>‚Ä¢ ÏõêÎ£å Î∞∞Ï∂úÎüâ: {results.cbam.breakdown.material_emissions.toFixed(2)} tCO‚ÇÇ</p>
                  <p>‚Ä¢ Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ: {results.cbam.breakdown.precursor_emissions.toFixed(2)} tCO‚ÇÇ</p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderStats = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üìä Í≥ÑÏÇ∞ ÌÜµÍ≥Ñ</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-blue-400 mb-2">Ïó∞Î£å Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.fuel_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
          
          <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-green-400 mb-2">ÏõêÎ£å Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.material_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
          
          <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-purple-400 mb-2">CBAM Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.cbam_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
          
          <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-orange-400 mb-2">Ï†ÑÏ≤¥ Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.total_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
        </div>

        {/* ÏµúÍ∑º Í≥ÑÏÇ∞ Ïù¥Î†• */}
        {results.stats?.recent_calculations && results.stats.recent_calculations.length > 0 && (
          <div className="mt-6">
            <h4 className="font-semibold text-white mb-3">ÏµúÍ∑º Í≥ÑÏÇ∞ Ïù¥Î†•</h4>
            <div className="space-y-2">
              {results.stats.recent_calculations.map((calc, index) => (
                <div key={index} className="p-3 bg-gray-800 border border-gray-700 rounded-lg">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-3">
                      <span className="px-2 py-1 text-xs bg-gray-700 text-gray-300 rounded">{calc.type}</span>
                      <span className="text-sm text-gray-300">
                        {new Date(calc.timestamp).toLocaleString('ko-KR')}
                      </span>
                    </div>
                    <div className="text-sm font-medium text-white">
                      {calc.emission.toFixed(2)} tCO‚ÇÇeq
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-950 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">üßÆ CBAM Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h1>
          <p className="text-gray-300">
            Ïó∞Î£å, ÏõêÎ£å, Ï†ÑÍµ¨Î¨ºÏßàÏùò Î∞∞Ï∂úÎüâÏùÑ Í≥ÑÏÇ∞ÌïòÍ≥† CBAM ÎπÑÏö©ÏùÑ ÏÇ∞Ï∂úÌï©ÎãàÎã§
          </p>
        </div>

        {/* Tab Navigation */}
        <div className="flex flex-wrap gap-2 mb-8">
          {[
            { key: 'fuel', label: 'üî• Ïó∞Î£å Í≥ÑÏÇ∞', badge: 'Fuel' },
            { key: 'material', label: 'üß± ÏõêÎ£å Í≥ÑÏÇ∞', badge: 'Material' },
            { key: 'precursor', label: 'üî¨ Ï†ÑÍµ¨Î¨ºÏßà', badge: 'Precursor' },
            { key: 'cbam', label: 'üéØ CBAM Í≥ÑÏÇ∞', badge: 'CBAM' },
            { key: 'stats', label: 'üìä ÌÜµÍ≥Ñ', badge: 'Stats' }
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key as any)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${
                activeTab === tab.key
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              {tab.label}
              <span className="px-2 py-1 text-xs bg-gray-700 text-gray-300 rounded">{tab.badge}</span>
            </button>
          ))}
        </div>

        {/* Tab Content */}
        {activeTab === 'fuel' && renderFuelCalculation()}
        {activeTab === 'material' && renderMaterialCalculation()}
        {activeTab === 'precursor' && renderPrecursorManagement()}
        {activeTab === 'cbam' && renderCBAMCalculation()}
        {activeTab === 'stats' && renderStats()}

        {/* Toast */}
        {toast && (
          <div className={`fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
            toast.type === 'success' ? 'bg-green-600' :
            toast.type === 'error' ? 'bg-red-600' : 'bg-blue-600'
          } text-white`}>
            <div className="flex items-center justify-between">
              <span>{toast.message}</span>
              <button
                onClick={() => setToast(null)}
                className="ml-2 text-white hover:text-gray-200"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
