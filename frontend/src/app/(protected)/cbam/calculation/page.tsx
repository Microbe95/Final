'use client';

import React, { useState, useEffect } from 'react';
import Button from '@/components/atomic/atoms/Button';
import Input from '@/components/atomic/atoms/Input';
// StatusBadge has different props, so we'll use simple spans
import { useCalculationAPI } from '@/hooks/useCalculationAPI';
import axiosClient from '@/lib/axiosClient';
import type {
  FuelCalculationRequest,
  MaterialCalculationRequest,
  PrecursorData,
  PrecursorCalculationRequest,
  ElectricityCalculationRequest,
  ProductionProcess,
  CBAMCalculationRequest,
  FuelCalculationResponse,
  MaterialCalculationResponse,
  PrecursorCalculationResponse,
  ElectricityCalculationResponse,
  CBAMCalculationResponse,
  CalculationStatsResponse
} from '@/hooks/useCalculationAPI';

// ============================================================================
// üßÆ CBAM Í≥ÑÏÇ∞ ÌéòÏù¥ÏßÄ
// ============================================================================

export default function CalculationPage() {
  const [activeTab, setActiveTab] = useState<'fuel' | 'material' | 'precursor' | 'electricity' | 'process' | 'cbam' | 'stats' | 'boundary' | 'product' | 'operation' | 'node' | 'edge' | 'emission'>('fuel');
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' | 'info' } | null>(null);

  // API Hooks
  const {
    calculateFuelEmission,
    calculateMaterialEmission,
    calculatePrecursorEmission,
    calculateElectricityEmission,
    calculateProcessEmissions,
    getPrecursorList,
    savePrecursorBatch,
    calculateCBAM,
    getCalculationStats,
    getCalculationHistory
  } = useCalculationAPI();

  // Form States
  const [fuelForm, setFuelForm] = useState<FuelCalculationRequest>({
    fuel_name: '',
    fuel_amount: 0
  });

  const [materialForm, setMaterialForm] = useState<MaterialCalculationRequest>({
    material_name: '',
    material_amount: 0
  });

  const [precursorForm, setPrecursorForm] = useState<PrecursorData>({
    user_id: '',
    precursor_name: '',
    emission_factor: 0,
    carbon_content: 0
  });

  const [cbamForm, setCbamForm] = useState<CBAMCalculationRequest>({
    product_name: '',
    product_type: 'Îã®Ïàú',
    user_id: '',
    production_period: { start: '', end: '' },
    cn_code: '',
    production_quantity: 0,
    processes: [],
    fuels: [],
    materials: [],
    electricity: null,
    precursors: [],
    fuel_emissions: 0,
    material_emissions: 0,
    precursor_emissions: 0
  });

  const [electricityForm, setElectricityForm] = useState<ElectricityCalculationRequest>({
    power_usage: 0,
    emission_factor: 0.4567
  });

  const [processForm, setProcessForm] = useState<ProductionProcess>({
    process_order: 1,
    process_name: '',
    start_date: '',
    end_date: '',
    duration_days: 0,
    input_material_name: '',
    input_material_amount: 0,
    input_fuel_name: '',
    input_fuel_amount: 0,
    power_usage: 0,
    direct_emission: 0,
    indirect_emission: 0,
    precursor_emission: 0,
    total_emission: 0
  });

  // ÏÉàÎ°úÏö¥ ÌÖåÏù¥Î∏î Ìèº ÏÉÅÌÉúÎì§
  const [boundaryForm, setBoundaryForm] = useState({
    name: '',
    boundary_type: 'individual',
    description: '',
    company_id: 1
  });

  const [productForm, setProductForm] = useState({
    name: '',
    cn_code: '',
    period_start: '',
    period_end: '',
    production_qty: 0,
    sales_qty: 0,
    export_qty: 0,
    inventory_qty: 0,
    defect_rate: 0
  });

  const [operationForm, setOperationForm] = useState({
    name: '',
    facility_id: 1,
    category: '',
    boundary_id: 1,
    input_kind: 'material',
    material_id: null,
    fuel_id: null,
    quantity: 0,
    unit_id: 1
  });

  const [nodeForm, setNodeForm] = useState({
    boundary_id: 1,
    node_type: 'product',
    ref_id: 1,
    label: '',
    pos_x: 0,
    pos_y: 0
  });

  const [edgeForm, setEdgeForm] = useState({
    boundary_id: 1,
    sourcenode_id: '',
    targetnode_id: '',
    flow_type: 'material',
    label: ''
  });

  const [emissionForm, setEmissionForm] = useState({
    product_id: 1,
    boundary_id: 1,
    result_unit_id: 1,
    dir_emission: 0,
    indir_emission: 0,
    see: 0
  });

  // Results
  const [results, setResults] = useState<{
    fuel?: FuelCalculationResponse;
    material?: MaterialCalculationResponse;
    precursor?: PrecursorCalculationResponse;
    electricity?: ElectricityCalculationResponse;
    process?: ProductionProcess[];
    cbam?: CBAMCalculationResponse;
    stats?: CalculationStatsResponse;
    boundary?: any;
    product?: any;
    operation?: any;
    node?: any;
    edge?: any;
    emission?: any;
  }>({});

  const [precursorList, setPrecursorList] = useState<PrecursorData[]>([]);

  // ============================================================================
  // üî• Ïó∞Î£å Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleFuelCalculation = async () => {
    if (!fuelForm.fuel_name || fuelForm.fuel_amount <= 0) {
      setToast({ message: 'Ïó∞Î£åÎ™ÖÍ≥º Ïó∞Î£åÎüâÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateFuelEmission(fuelForm);
      
      if (result) {
        setResults(prev => ({ ...prev, fuel: result }));
        setToast({ message: 'Ïó∞Î£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'Ïó∞Î£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Fuel calculation error:', error);
      setToast({ message: 'Ïó∞Î£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üß± ÏõêÎ£å Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleMaterialCalculation = async () => {
    if (!materialForm.material_name || materialForm.material_amount <= 0) {
      setToast({ message: 'ÏõêÎ£åÎ™ÖÍ≥º ÏõêÎ£åÎüâÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateMaterialEmission(materialForm);
      
      if (result) {
        setResults(prev => ({ ...prev, material: result }));
        setToast({ message: 'ÏõêÎ£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'ÏõêÎ£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Material calculation error:', error);
      setToast({ message: 'ÏõêÎ£å Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üéØ CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleCBAMCalculation = async () => {
    if (!cbamForm.product_name) {
      setToast({ message: 'Ï†úÌíàÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateCBAM(cbamForm);
      
      if (result) {
        setResults(prev => ({ ...prev, cbam: result }));
        setToast({ message: 'CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'CBAM Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('CBAM calculation error:', error);
      setToast({ message: 'CBAM Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üî¨ Ï†ÑÍµ¨Î¨ºÏßà Í≥ÑÏÇ∞
  // ============================================================================
  
  const handlePrecursorCalculation = async () => {
    if (!precursorForm.precursor_name || precursorForm.emission_factor <= 0) {
      setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßàÎ™ÖÍ≥º Î∞∞Ï∂úÍ≥ÑÏàòÎ•º Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculatePrecursorEmission({
        precursor_name: precursorForm.precursor_name,
        precursor_amount: precursorForm.emission_factor, // ÏûÑÏãúÎ°ú Î∞∞Ï∂úÍ≥ÑÏàòÎ•º ÏÇ¨Ïö©ÎüâÏúºÎ°ú ÏÇ¨Ïö©
        emission_factor: precursorForm.emission_factor,
        carbon_content: precursorForm.carbon_content
      });
      
      if (result) {
        setResults(prev => ({ ...prev, precursor: result }));
        setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Precursor calculation error:', error);
      setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // ‚ö° Ï†ÑÎ†• ÏÇ¨Ïö© Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleElectricityCalculation = async () => {
    if (electricityForm.power_usage <= 0) {
      setToast({ message: 'Ï†ÑÎ†• ÏÇ¨Ïö©ÎüâÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateElectricityEmission(electricityForm);
      
      if (result) {
        setResults(prev => ({ ...prev, electricity: result }));
        setToast({ message: 'Ï†ÑÎ†• ÏÇ¨Ïö© Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'Ï†ÑÎ†• Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Electricity calculation error:', error);
      setToast({ message: 'Ï†ÑÎ†• Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üè≠ ÏÉùÏÇ∞ Í≥µÏ†ï Í≥ÑÏÇ∞
  // ============================================================================
  
  const handleProcessCalculation = async () => {
    if (!processForm.process_name || !processForm.start_date || !processForm.end_date) {
      setToast({ message: 'Í≥µÏ†ïÎ™ÖÍ≥º ÏãúÏûë/Ï¢ÖÎ£åÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await calculateProcessEmissions([processForm]);
      
      if (result) {
        setResults(prev => ({ ...prev, process: result }));
        setToast({ message: 'ÏÉùÏÇ∞ Í≥µÏ†ï Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
      } else {
        setToast({ message: 'Í≥µÏ†ï Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Process calculation error:', error);
      setToast({ message: 'Í≥µÏ†ï Í≥ÑÏÇ∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üî¨ Ï†ÑÍµ¨Î¨ºÏßà Í¥ÄÎ¶¨
  // ============================================================================
  
  const handlePrecursorSave = async () => {
    if (!precursorForm.user_id || !precursorForm.precursor_name) {
      setToast({ message: 'ÏÇ¨Ïö©Ïûê IDÏôÄ Ï†ÑÍµ¨Î¨ºÏßàÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await savePrecursorBatch([precursorForm]);
      
      if (result) {
        setToast({ message: `Ï†ÑÍµ¨Î¨ºÏßàÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§: ${result.message}`, type: 'success' });
        // Ìèº Ï¥àÍ∏∞Ìôî
        setPrecursorForm({
          user_id: precursorForm.user_id, // ÏÇ¨Ïö©Ïûê IDÎäî Ïú†ÏßÄ
          precursor_name: '',
          emission_factor: 0,
          carbon_content: 0
        });
      } else {
        setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Precursor save error:', error);
      setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handlePrecursorLoad = async () => {
    if (!precursorForm.user_id) {
      setToast({ message: 'ÏÇ¨Ïö©Ïûê IDÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const result = await getPrecursorList(precursorForm.user_id);
      
      if (result) {
        setPrecursorList(result.precursors);
        setToast({ message: `${result.total_count}Í∞úÏùò Ï†ÑÍµ¨Î¨ºÏßàÏùÑ Ï°∞ÌöåÌñàÏäµÎãàÎã§.`, type: 'success' });
      } else {
        setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Precursor load error:', error);
      setToast({ message: 'Ï†ÑÍµ¨Î¨ºÏßà Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üìä ÌÜµÍ≥Ñ Î°úÎìú
  // ============================================================================
  
  const loadStats = async () => {
    try {
      const result = await getCalculationStats();
      if (result) {
        setResults(prev => ({ ...prev, stats: result }));
      }
    } catch (error) {
      console.error('Stats load error:', error);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌÜµÍ≥Ñ Î°úÎìú
  useEffect(() => {
    if (activeTab === 'stats') {
      loadStats();
    }
  }, [activeTab]);

  // ============================================================================
  // üóÑÔ∏è ÏÉàÎ°úÏö¥ ÌÖåÏù¥Î∏î Ìï∏Îì§Îü¨Îì§
  // ============================================================================

  const handleBoundaryCreate = async () => {
    if (!boundaryForm.name || !boundaryForm.boundary_type) {
      setToast({ message: 'Í≤ΩÍ≥ÑÎ™ÖÍ≥º Í≤ΩÍ≥Ñ Ïú†ÌòïÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const response = await axiosClient.post('/api/v1/boundary/calc/boundary', boundaryForm);
      
      if (response.status === 200 || response.status === 201) {
        const result = response.data;
        setResults(prev => ({ ...prev, boundary: result }));
        setToast({ message: 'Í≤ΩÍ≥ÑÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
        setBoundaryForm({
          name: '',
          boundary_type: 'individual',
          description: '',
          company_id: 1
        }); // Ìèº Ï¥àÍ∏∞Ìôî
      } else {
        setToast({ message: 'Í≤ΩÍ≥Ñ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Boundary creation error:', error);
      setToast({ message: 'Í≤ΩÍ≥Ñ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleProductCreate = async () => {
    if (!productForm.name || !productForm.period_start || !productForm.period_end) {
      setToast({ message: 'Ï†úÌíàÎ™ÖÍ≥º Í∏∞Í∞ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      console.log('Ï†úÌíà ÏÉùÏÑ± ÏöîÏ≤≠:', productForm);
      
      const response = await axiosClient.post('/api/v1/boundary/product', productForm);
      
      console.log('Ï†úÌíà ÏÉùÏÑ± ÏùëÎãµ ÏÉÅÌÉú:', response.status);
      
      if (response.status === 200 || response.status === 201) {
        const result = response.data;
        console.log('Ï†úÌíà ÏÉùÏÑ± ÏÑ±Í≥µ:', result);
        setResults(prev => ({ ...prev, product: result }));
        setToast({ message: 'Ï†úÌíàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
        setProductForm({
          name: '',
          cn_code: '',
          period_start: '',
          period_end: '',
          production_qty: 0,
          sales_qty: 0,
          export_qty: 0,
          inventory_qty: 0,
          defect_rate: 0
        }); // Ìèº Ï¥àÍ∏∞Ìôî
      } else {
        console.error('Ï†úÌíà ÏÉùÏÑ± Ïã§Ìå®:', response.status, response.data);
        setToast({ message: `Ï†úÌíà ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. (${response.status})`, type: 'error' });
      }
    } catch (error) {
      console.error('Product creation error:', error);
      setToast({ message: 'Ï†úÌíà ÏÉùÏÑ± Ï§ë ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleOperationCreate = async () => {
    if (!operationForm.name || !operationForm.input_kind) {
      setToast({ message: 'Í≥µÏ†ïÎ™ÖÍ≥º ÏûÖÎ†• Ï¢ÖÎ•òÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const response = await axiosClient.post('/api/v1/boundary/calc/operation', operationForm);
      
      if (response.status === 200 || response.status === 201) {
        const result = response.data;
        setResults(prev => ({ ...prev, operation: result }));
        setToast({ message: 'Í≥µÏ†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
        setOperationForm({
          name: '',
          facility_id: 1,
          category: '',
          boundary_id: 1,
          input_kind: 'material',
          material_id: null,
          fuel_id: null,
          quantity: 0,
          unit_id: 1
        }); // Ìèº Ï¥àÍ∏∞Ìôî
      } else {
        setToast({ message: 'Í≥µÏ†ï ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Operation creation error:', error);
      setToast({ message: 'Í≥µÏ†ï ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleNodeCreate = async () => {
    if (!nodeForm.node_type || !nodeForm.ref_id) {
      setToast({ message: 'ÎÖ∏Îìú ÌÉÄÏûÖÍ≥º Ï∞∏Ï°∞ IDÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const response = await axiosClient.post('/api/v1/boundary/calc/node', nodeForm);
      
      if (response.status === 200 || response.status === 201) {
        const result = response.data;
        setResults(prev => ({ ...prev, node: result }));
        setToast({ message: 'ÎÖ∏ÎìúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
        setNodeForm({
          boundary_id: 1,
          node_type: 'product',
          ref_id: 1,
          label: '',
          pos_x: 0,
          pos_y: 0
        }); // Ìèº Ï¥àÍ∏∞Ìôî
      } else {
        setToast({ message: 'ÎÖ∏Îìú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Node creation error:', error);
      setToast({ message: 'ÎÖ∏Îìú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleEdgeCreate = async () => {
    if (!edgeForm.sourcenode_id || !edgeForm.targetnode_id || !edgeForm.flow_type) {
      setToast({ message: 'ÏãúÏûë ÎÖ∏Îìú, ÎèÑÏ∞© ÎÖ∏Îìú, ÌùêÎ¶Ñ Ïú†ÌòïÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const response = await axiosClient.post('/api/v1/boundary/calc/edge', edgeForm);
      
      if (response.status === 200 || response.status === 201) {
        const result = response.data;
        setResults(prev => ({ ...prev, edge: result }));
        setToast({ message: 'Ïó£ÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
        setEdgeForm({
          boundary_id: 1,
          sourcenode_id: '',
          targetnode_id: '',
          flow_type: 'material',
          label: ''
        }); // Ìèº Ï¥àÍ∏∞Ìôî
      } else {
        setToast({ message: 'Ïó£ÏßÄ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Edge creation error:', error);
      setToast({ message: 'Ïó£ÏßÄ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleEmissionCreate = async () => {
    if (!emissionForm.product_id || !emissionForm.boundary_id) {
      setToast({ message: 'Ï†úÌíà IDÏôÄ Í≤ΩÍ≥Ñ IDÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', type: 'error' });
      return;
    }

    setLoading(true);
    try {
      const response = await axiosClient.post('/api/v1/boundary/calc/production-emission', emissionForm);
      
      if (response.status === 200 || response.status === 201) {
        const result = response.data;
        setResults(prev => ({ ...prev, emission: result }));
        setToast({ message: 'ÏÉùÏÇ∞ Î∞∞Ï∂úÎüâÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!', type: 'success' });
        setEmissionForm({
          product_id: 1,
          boundary_id: 1,
          result_unit_id: 1,
          dir_emission: 0,
          indir_emission: 0,
          see: 0
        }); // Ìèº Ï¥àÍ∏∞Ìôî
      } else {
        setToast({ message: 'ÏÉùÏÇ∞ Î∞∞Ï∂úÎüâ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
      }
    } catch (error) {
      console.error('Emission creation error:', error);
      setToast({ message: 'ÏÉùÏÇ∞ Î∞∞Ï∂úÎüâ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // üé® Î†åÎçîÎßÅ Ìï®ÏàòÎì§
  // ============================================================================

  const renderFuelCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üî• Ïó∞Î£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ïó∞Î£åÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={fuelForm.fuel_name}
              onChange={(e) => setFuelForm(prev => ({ ...prev, fuel_name: e.target.value }))}
              placeholder="Ïòà: Ï≤úÏó∞Í∞ÄÏä§"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ïó∞Î£åÎüâ (ÌÜ§) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={fuelForm.fuel_amount}
              onChange={(e) => setFuelForm(prev => ({ ...prev, fuel_amount: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleFuelCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Ïó∞Î£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.fuel && (
          <div className="mt-6 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
            <h4 className="font-semibold text-green-400 mb-3">üî• Ïó∞Î£å Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ïó∞Î£åÎ™Ö:</strong> {results.fuel.fuel_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.fuel.emission?.toFixed(2)} tCO‚ÇÇ</p>
              <p><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {results.fuel.emission_factor} tCO‚ÇÇ/TJ</p>
              <p><strong>ÏàúÎ∞úÏó¥Îüâ:</strong> {results.fuel.net_calorific_value} TJ/Gg</p>
              <p><strong>Í≥ÑÏÇ∞Ïãù:</strong> {results.fuel.calculation_formula}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderMaterialCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üß± ÏõêÎ£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏõêÎ£åÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={materialForm.material_name}
              onChange={(e) => setMaterialForm(prev => ({ ...prev, material_name: e.target.value }))}
              placeholder="Ïòà: Ï≤†Í¥ëÏÑù"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏõêÎ£åÎüâ (ÌÜ§) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={materialForm.material_amount}
              onChange={(e) => setMaterialForm(prev => ({ ...prev, material_amount: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleMaterialCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          ÏõêÎ£å Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.material && (
          <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <h4 className="font-semibold text-blue-400 mb-3">üß± ÏõêÎ£å Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>ÏõêÎ£åÎ™Ö:</strong> {results.material.material_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.material.emission?.toFixed(2)} tCO‚ÇÇ</p>
              <p><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {results.material.emission_factor} tCO‚ÇÇ/ÌÜ§</p>
              <p><strong>Í≥ÑÏÇ∞Ïãù:</strong> {results.material.calculation_formula}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderPrecursorCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üî¨ Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï†ÑÍµ¨Î¨ºÏßàÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={precursorForm.precursor_name}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, precursor_name: e.target.value }))}
              placeholder="Ïòà: ÏÑùÌöåÏÑù"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏÇ¨Ïö©Îüâ (ÌÜ§) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={precursorForm.emission_factor}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, emission_factor: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Î∞∞Ï∂úÍ≥ÑÏàò (tCO2/ÌÜ§) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={precursorForm.emission_factor}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, emission_factor: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÌÉÑÏÜåÌï®Îüâ (%)
            </label>
            <Input
              type="number"
              value={precursorForm.carbon_content}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, carbon_content: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              max="100"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handlePrecursorCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.precursor && (
          <div className="mt-6 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg">
            <h4 className="font-semibold text-yellow-400 mb-3">üî¨ Ï†ÑÍµ¨Î¨ºÏßà Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ï†ÑÍµ¨Î¨ºÏßàÎ™Ö:</strong> {results.precursor.precursor_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.precursor.emission?.toFixed(2)} tCO‚ÇÇ</p>
              <p><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {results.precursor.emission_factor} tCO‚ÇÇ/ÌÜ§</p>
              <p><strong>ÌÉÑÏÜåÌï®Îüâ:</strong> {results.precursor.carbon_content}%</p>
              <p><strong>Í≥ÑÏÇ∞Ïãù:</strong> {results.precursor.calculation_formula}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderElectricityCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">‚ö° Ï†ÑÎ†• ÏÇ¨Ïö© Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï†ÑÎ†• ÏÇ¨Ïö©Îüâ (MWh) <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={electricityForm.power_usage}
              onChange={(e) => setElectricityForm(prev => ({ ...prev, power_usage: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Î∞∞Ï∂úÍ≥ÑÏàò (tCO2/MWh)
            </label>
            <Input
              type="number"
              value={electricityForm.emission_factor}
              onChange={(e) => setElectricityForm(prev => ({ ...prev, emission_factor: parseFloat(e.target.value) || 0.4567 }))}
              placeholder="0.4567"
              min="0"
              step="0.0001"
              className="w-full"
            />
          </div>
        </div>

        <div className="mb-6 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
          <p className="text-sm text-blue-300">
            <strong>Ï∞∏Í≥†:</strong> Ï†ÑÎ†•Î∞∞Ï∂úÍ≥ÑÏàòÎäî 2014~2016 Ïó∞ÌèâÍ∑† Í∏∞Î≥∏Í∞íÏùÑ ÏÇ¨Ïö©Ìï® (0.4567 tCO2/MWh)
          </p>
        </div>

        <Button
          onClick={handleElectricityCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Ï†ÑÎ†• ÏÇ¨Ïö© Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.electricity && (
          <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <h4 className="font-semibold text-blue-400 mb-3">‚ö° Ï†ÑÎ†• Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ï†ÑÎ†• ÏÇ¨Ïö©Îüâ:</strong> {results.electricity.power_usage} MWh</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.electricity.emission?.toFixed(2)} tCO‚ÇÇ</p>
              <p><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {results.electricity.emission_factor} tCO‚ÇÇ/MWh</p>
              <p><strong>Í≥ÑÏÇ∞Ïãù:</strong> {results.electricity.calculation_formula}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderProcessCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üè≠ ÏÉùÏÇ∞ Í≥µÏ†ï Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Í≥µÏ†ïÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={processForm.process_name}
              onChange={(e) => setProcessForm(prev => ({ ...prev, process_name: e.target.value }))}
              placeholder="Ïòà: Ïö©Ìï¥ Í≥µÏ†ï"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏãúÏûëÏùº <span className="text-red-500">*</span>
            </label>
            <Input
              type="date"
              value={processForm.start_date}
              onChange={(e) => setProcessForm(prev => ({ ...prev, start_date: e.target.value }))}
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï¢ÖÎ£åÏùº <span className="text-red-500">*</span>
            </label>
            <Input
              type="date"
              value={processForm.end_date}
              onChange={(e) => setProcessForm(prev => ({ ...prev, end_date: e.target.value }))}
              className="w-full"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ìà¨ÏûÖ Ïó∞Î£åÎ™Ö</label>
            <Input
              value={processForm.input_fuel_name || ''}
              onChange={(e) => setProcessForm(prev => ({ ...prev, input_fuel_name: e.target.value }))}
              placeholder="Ïòà: Ï≤úÏó∞Í∞ÄÏä§"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ìà¨ÏûÖ Ïó∞Î£åÎüâ (ÌÜ§)</label>
            <Input
              type="number"
              value={processForm.input_fuel_amount || 0}
              onChange={(e) => setProcessForm(prev => ({ ...prev, input_fuel_amount: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ìà¨ÏûÖ ÏõêÎ£åÎ™Ö</label>
            <Input
              value={processForm.input_material_name || ''}
              onChange={(e) => setProcessForm(prev => ({ ...prev, input_material_name: e.target.value }))}
              placeholder="Ïòà: Ï≤†Í¥ëÏÑù"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ìà¨ÏûÖ ÏõêÎ£åÎüâ (ÌÜ§)</label>
            <Input
              type="number"
              value={processForm.input_material_amount || 0}
              onChange={(e) => setProcessForm(prev => ({ ...prev, input_material_amount: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†ÑÎ†• ÏÇ¨Ïö©Îüâ (MWh)</label>
            <Input
              type="number"
              value={processForm.power_usage || 0}
              onChange={(e) => setProcessForm(prev => ({ ...prev, power_usage: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleProcessCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Í≥µÏ†ï Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞
        </Button>

        {results.process && results.process.length > 0 && (
          <div className="mt-6 p-4 bg-purple-500/10 border border-purple-500/30 rounded-lg">
            <h4 className="font-semibold text-purple-400 mb-3">üè≠ Í≥µÏ†ï Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              {results.process.map((process, index) => (
                <div key={index} className="p-3 bg-gray-800 border border-gray-700 rounded-lg">
                  <p><strong>Í≥µÏ†ïÎ™Ö:</strong> {process.process_name}</p>
                  <p><strong>ÏßÅÏ†ë Î∞∞Ï∂úÎüâ:</strong> {process.direct_emission?.toFixed(2)} tCO‚ÇÇ</p>
                  <p><strong>Í∞ÑÏ†ë Î∞∞Ï∂úÎüâ:</strong> {process.indirect_emission?.toFixed(2)} tCO‚ÇÇ</p>
                  <p><strong>Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ:</strong> {process.precursor_emission?.toFixed(2)} tCO‚ÇÇ</p>
                  <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {process.total_emission?.toFixed(2)} tCO‚ÇÇ</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderPrecursorManagement = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üî¨ Ï†ÑÍµ¨Î¨ºÏßà Í¥ÄÎ¶¨</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">ÏÇ¨Ïö©Ïûê ID <span className="text-red-500">*</span>
            </label>
            <Input
              value={precursorForm.user_id}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, user_id: e.target.value }))}
              placeholder="ÏÇ¨Ïö©Ïûê ID"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†ÑÍµ¨Î¨ºÏßàÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={precursorForm.precursor_name}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, precursor_name: e.target.value }))}
              placeholder="Ïòà: ÏÑùÌöåÏÑù"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Î∞∞Ï∂úÍ≥ÑÏàò            </label>
            <Input
              type="number"
              value={precursorForm.emission_factor}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, emission_factor: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">ÌÉÑÏÜåÌï®Îüâ            </label>
            <Input
              type="number"
              value={precursorForm.carbon_content}
              onChange={(e) => setPrecursorForm(prev => ({ ...prev, carbon_content: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <div className="flex gap-3">
          <Button
            onClick={handlePrecursorSave}
            loading={loading}
            variant="primary"
            className="flex-1 md:flex-none"
          >
            Ï†ÑÍµ¨Î¨ºÏßà Ï†ÄÏû•
          </Button>
          
          <Button
            onClick={handlePrecursorLoad}
            loading={loading}
            variant="secondary"
            className="flex-1 md:flex-none"
          >
            Ï†ÑÍµ¨Î¨ºÏßà Ï°∞Ìöå
          </Button>
        </div>

        {/* Ï†ÑÍµ¨Î¨ºÏßà Î™©Î°ù */}
        {precursorList.length > 0 && (
          <div className="mt-6">
            <h4 className="font-semibold text-white mb-3">Ï†ÄÏû•Îêú Ï†ÑÍµ¨Î¨ºÏßà</h4>
            <div className="space-y-2">
              {precursorList.map((precursor, index) => (
                <div key={index} className="p-3 bg-gray-800 border border-gray-700 rounded-lg">
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                    <div><strong>Ïù¥Î¶Ñ:</strong> {precursor.precursor_name}</div>
                    <div><strong>Î∞∞Ï∂úÍ≥ÑÏàò:</strong> {precursor.emission_factor}</div>
                    <div><strong>ÌÉÑÏÜåÌï®Îüâ:</strong> {precursor.carbon_content}</div>
                    <div><strong>ÏÇ¨Ïö©Ïûê:</strong> {precursor.user_id}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderCBAMCalculation = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üéØ CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†úÌíàÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={cbamForm.product_name}
              onChange={(e) => setCbamForm(prev => ({ ...prev, product_name: e.target.value }))}
              placeholder="Ïòà: Ï≤†Í∞ï Ï†úÌíà"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ïó∞Î£å Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)            </label>
            <Input
              type="number"
              value={cbamForm.fuel_emissions}
              onChange={(e) => setCbamForm(prev => ({ ...prev, fuel_emissions: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">ÏõêÎ£å Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)            </label>
            <Input
              type="number"
              value={cbamForm.material_emissions}
              onChange={(e) => setCbamForm(prev => ({ ...prev, material_emissions: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)            </label>
            <Input
              type="number"
              value={cbamForm.precursor_emissions}
              onChange={(e) => setCbamForm(prev => ({ ...prev, precursor_emissions: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleCBAMCalculation}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          CBAM Ï¢ÖÌï© Í≥ÑÏÇ∞
        </Button>

        {results.cbam && (
          <div className="mt-6 p-4 bg-purple-500/10 border border-purple-500/30 rounded-lg">
            <h4 className="font-semibold text-purple-400 mb-3">üéØ CBAM Í≥ÑÏÇ∞ Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ï†úÌíàÎ™Ö:</strong> {results.cbam.product_name}</p>
              <p><strong>Ï¥ù Î∞∞Ï∂úÎüâ:</strong> {results.cbam.emission?.toFixed(2)} tCO‚ÇÇeq</p>
              <p><strong>CBAM ÏöîÏú®:</strong> ‚Ç¨{results.cbam.cbam_rate}/tCO‚ÇÇeq</p>
              <p><strong>CBAM ÎπÑÏö©:</strong> ‚Ç¨{results.cbam.cbam_cost?.toFixed(2)}</p>
              {results.cbam.breakdown && (
                <div className="mt-3 pt-3 border-t border-purple-500/30">
                  <p className="font-semibold mb-1">Î∞∞Ï∂úÎüâ ÏÑ∏Î∂ÄÏÇ¨Ìï≠:</p>
                  <p>‚Ä¢ Ïó∞Î£å Î∞∞Ï∂úÎüâ: {results.cbam.breakdown.fuel_emissions.toFixed(2)} tCO‚ÇÇ</p>
                  <p>‚Ä¢ ÏõêÎ£å Î∞∞Ï∂úÎüâ: {results.cbam.breakdown.material_emissions.toFixed(2)} tCO‚ÇÇ</p>
                  <p>‚Ä¢ Ï†ÑÍµ¨Î¨ºÏßà Î∞∞Ï∂úÎüâ: {results.cbam.breakdown.precursor_emissions.toFixed(2)} tCO‚ÇÇ</p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderStats = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üìä Í≥ÑÏÇ∞ ÌÜµÍ≥Ñ</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-blue-400 mb-2">Ïó∞Î£å Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.fuel_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
          
          <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-green-400 mb-2">ÏõêÎ£å Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.material_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
          
          <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-purple-400 mb-2">CBAM Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.cbam_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
          
          <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4">
            <h4 className="font-semibold text-orange-400 mb-2">Ï†ÑÏ≤¥ Í≥ÑÏÇ∞</h4>
            <p className="text-2xl font-bold">{results.stats?.total_calculations || 0}</p>
            <p className="text-sm text-gray-400">Ï¥ù Í≥ÑÏÇ∞ ÌöüÏàò</p>
          </div>
        </div>

        {/* ÏµúÍ∑º Í≥ÑÏÇ∞ Ïù¥Î†• */}
        {results.stats?.recent_calculations && results.stats.recent_calculations.length > 0 && (
          <div className="mt-6">
            <h4 className="font-semibold text-white mb-3">ÏµúÍ∑º Í≥ÑÏÇ∞ Ïù¥Î†•</h4>
            <div className="space-y-2">
              {results.stats.recent_calculations.map((calc, index) => (
                <div key={index} className="p-3 bg-gray-800 border border-gray-700 rounded-lg">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-3">
                      <span className="px-2 py-1 text-xs bg-gray-700 text-gray-300 rounded">{calc.type}</span>
                      <span className="text-sm text-gray-300">
                        {new Date(calc.timestamp).toLocaleString('ko-KR')}
                      </span>
                    </div>
                    <div className="text-sm font-medium text-white">
                      {calc.emission.toFixed(2)} tCO‚ÇÇeq
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderBoundaryForm = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üó∫Ô∏è Í≤ΩÍ≥Ñ ÏÉùÏÑ±</h3>
        
        <div className="mb-6">
          <label className="block text-sm font-medium text-white mb-2">
            Í≤ΩÍ≥ÑÎ™Ö <span className="text-red-500">*</span>
          </label>
          <Input
            value={boundaryForm.name}
            onChange={(e) => setBoundaryForm(prev => ({ ...prev, name: e.target.value }))}
            placeholder="Ïòà: Ï≤†Í∞ï ÏÉùÏÇ∞ Í≤ΩÍ≥Ñ"
            className="w-full"
          />
        </div>

        <Button
          onClick={handleBoundaryCreate}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Í≤ΩÍ≥Ñ ÏÉùÏÑ±
        </Button>

        {results.boundary && (
          <div className="mt-6 p-4 bg-green-500/10 border border-green-500/30 rounded-lg">
            <h4 className="font-semibold text-green-400 mb-3">‚úÖ Í≤ΩÍ≥Ñ ÏÉùÏÑ± Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Í≤ΩÍ≥Ñ ID:</strong> {results.boundary.boundary_id}</p>
              <p><strong>Í≤ΩÍ≥ÑÎ™Ö:</strong> {results.boundary.name}</p>
              <p><strong>ÏÉùÏÑ±Ïùº:</strong> {results.boundary.created_at}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderProductForm = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üì¶ Ï†úÌíà ÏÉùÏÑ±</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï†úÌíàÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={productForm.name}
              onChange={(e) => setProductForm(prev => ({ ...prev, name: e.target.value }))}
              placeholder="Ïòà: Ï≤†Í∞ï Ï†úÌíà"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              CN ÏΩîÎìú
            </label>
            <Input
              value={productForm.cn_code}
              onChange={(e) => setProductForm(prev => ({ ...prev, cn_code: e.target.value }))}
              placeholder="Ïòà: 7208"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏãúÏûëÏùº <span className="text-red-500">*</span>
            </label>
            <Input
              type="date"
              value={productForm.period_start}
              onChange={(e) => setProductForm(prev => ({ ...prev, period_start: e.target.value }))}
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï¢ÖÎ£åÏùº <span className="text-red-500">*</span>
            </label>
            <Input
              type="date"
              value={productForm.period_end}
              onChange={(e) => setProductForm(prev => ({ ...prev, period_end: e.target.value }))}
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏÉùÏÇ∞Îüâ (ÌÜ§)
            </label>
            <Input
              type="number"
              value={productForm.production_qty}
              onChange={(e) => setProductForm(prev => ({ ...prev, production_qty: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ïô∏Î∂ÄÌåêÎß§Îüâ (ÌÜ§)
            </label>
            <Input
              type="number"
              value={productForm.sales_qty}
              onChange={(e) => setProductForm(prev => ({ ...prev, sales_qty: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleProductCreate}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Ï†úÌíà ÏÉùÏÑ±
        </Button>

        {results.product && (
          <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <h4 className="font-semibold text-blue-400 mb-3">‚úÖ Ï†úÌíà ÏÉùÏÑ± Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ï†úÌíà ID:</strong> {results.product.product_id}</p>
              <p><strong>Ï†úÌíàÎ™Ö:</strong> {results.product.name}</p>
              <p><strong>CN ÏΩîÎìú:</strong> {results.product.cn_code}</p>
              <p><strong>Í∏∞Í∞Ñ:</strong> {results.product.period_start} ~ {results.product.period_end}</p>
              <p><strong>ÏÉùÏÇ∞Îüâ:</strong> {results.product.production_qty} ÌÜ§</p>
              <p><strong>Ïô∏Î∂ÄÌåêÎß§Îüâ:</strong> {results.product.sales_qty} ÌÜ§</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderOperationForm = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üè≠ Í≥µÏ†ï ÏÉùÏÑ±</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Í≥µÏ†ïÎ™Ö <span className="text-red-500">*</span>
            </label>
            <Input
              value={operationForm.name}
              onChange={(e) => setOperationForm(prev => ({ ...prev, name: e.target.value }))}
              placeholder="Ïòà: Ïö©Ìï¥ Í≥µÏ†ï"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Í≥µÏ†ï Î∂ÑÎ•ò
            </label>
            <Input
              value={operationForm.category}
              onChange={(e) => setOperationForm(prev => ({ ...prev, category: e.target.value }))}
              placeholder="Ïòà: Ï†úÍ∞ï"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏûÖÎ†• Ï¢ÖÎ•ò <span className="text-red-500">*</span>
            </label>
            <select
              value={operationForm.input_kind}
              onChange={(e) => setOperationForm(prev => ({ ...prev, input_kind: e.target.value }))}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="material">ÏõêÎ£å (material)</option>
              <option value="fuel">Ïó∞Î£å (fuel)</option>
              <option value="electricity">Ï†ÑÎ†• (electricity)</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏÇ¨Ïö©Îüâ
            </label>
            <Input
              type="number"
              value={operationForm.quantity}
              onChange={(e) => setOperationForm(prev => ({ ...prev, quantity: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleOperationCreate}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Í≥µÏ†ï ÏÉùÏÑ±
        </Button>

        {results.operation && (
          <div className="mt-6 p-4 bg-purple-500/10 border border-purple-500/30 rounded-lg">
            <h4 className="font-semibold text-purple-400 mb-3">‚úÖ Í≥µÏ†ï ÏÉùÏÑ± Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Í≥µÏ†ï ID:</strong> {results.operation.operation_id}</p>
              <p><strong>Í≥µÏ†ïÎ™Ö:</strong> {results.operation.name}</p>
              <p><strong>Í≥µÏ†ï Î∂ÑÎ•ò:</strong> {results.operation.category}</p>
              <p><strong>ÏûÖÎ†• Ï¢ÖÎ•ò:</strong> {results.operation.input_kind}</p>
              <p><strong>ÏÇ¨Ïö©Îüâ:</strong> {results.operation.quantity}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderNodeForm = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üîò ÎÖ∏Îìú ÏÉùÏÑ±</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÎÖ∏Îìú ÌÉÄÏûÖ <span className="text-red-500">*</span>
            </label>
            <select
              value={nodeForm.node_type}
              onChange={(e) => setNodeForm(prev => ({ ...prev, node_type: e.target.value }))}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="product">Ï†úÌíà (product)</option>
              <option value="operation">Í≥µÏ†ï (operation)</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï∞∏Ï°∞ ID <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={nodeForm.ref_id}
              onChange={(e) => setNodeForm(prev => ({ ...prev, ref_id: parseInt(e.target.value) || 1 }))}
              placeholder="1"
              min="1"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÎùºÎ≤®
            </label>
            <Input
              value={nodeForm.label}
              onChange={(e) => setNodeForm(prev => ({ ...prev, label: e.target.value }))}
              placeholder="ÌôîÎ©¥ ÌëúÏãúÏö© ÎùºÎ≤®"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              X Ï¢åÌëú
            </label>
            <Input
              type="number"
              value={nodeForm.pos_x}
              onChange={(e) => setNodeForm(prev => ({ ...prev, pos_x: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              step="0.1"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleNodeCreate}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          ÎÖ∏Îìú ÏÉùÏÑ±
        </Button>

        {results.node && (
          <div className="mt-6 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg">
            <h4 className="font-semibold text-yellow-400 mb-3">‚úÖ ÎÖ∏Îìú ÏÉùÏÑ± Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>ÎÖ∏Îìú ID:</strong> {results.node.node_id}</p>
              <p><strong>ÎÖ∏Îìú ÌÉÄÏûÖ:</strong> {results.node.node_type}</p>
              <p><strong>Ï∞∏Ï°∞ ID:</strong> {results.node.ref_id}</p>
              <p><strong>ÎùºÎ≤®:</strong> {results.node.label}</p>
              <p><strong>ÏúÑÏπò:</strong> ({results.node.pos_x}, {results.node.pos_y})</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderEdgeForm = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üîó Ïó£ÏßÄ ÏÉùÏÑ±</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏãúÏûë ÎÖ∏Îìú ID <span className="text-red-500">*</span>
            </label>
            <Input
              value={edgeForm.sourcenode_id}
              onChange={(e) => setEdgeForm(prev => ({ ...prev, sourcenode_id: e.target.value }))}
              placeholder="Ïòà: node-1"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÎèÑÏ∞© ÎÖ∏Îìú ID <span className="text-red-500">*</span>
            </label>
            <Input
              value={edgeForm.targetnode_id}
              onChange={(e) => setEdgeForm(prev => ({ ...prev, targetnode_id: e.target.value }))}
              placeholder="Ïòà: node-2"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÌùêÎ¶Ñ Ïú†Ìòï <span className="text-red-500">*</span>
            </label>
            <select
              value={edgeForm.flow_type}
              onChange={(e) => setEdgeForm(prev => ({ ...prev, flow_type: e.target.value }))}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="material">ÏõêÎ£å (material)</option>
              <option value="fuel">Ïó∞Î£å (fuel)</option>
              <option value="electricity">Ï†ÑÎ†• (electricity)</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÎùºÎ≤®
            </label>
            <Input
              value={edgeForm.label}
              onChange={(e) => setEdgeForm(prev => ({ ...prev, label: e.target.value }))}
              placeholder="ÌôîÎ©¥ ÌëúÏãúÏö© ÎùºÎ≤®"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleEdgeCreate}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          Ïó£ÏßÄ ÏÉùÏÑ±
        </Button>

        {results.edge && (
          <div className="mt-6 p-4 bg-orange-500/10 border border-orange-500/30 rounded-lg">
            <h4 className="font-semibold text-orange-400 mb-3">‚úÖ Ïó£ÏßÄ ÏÉùÏÑ± Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Ïó£ÏßÄ ID:</strong> {results.edge.edge_id}</p>
              <p><strong>ÏãúÏûë ÎÖ∏Îìú:</strong> {results.edge.sourcenode_id}</p>
              <p><strong>ÎèÑÏ∞© ÎÖ∏Îìú:</strong> {results.edge.targetnode_id}</p>
              <p><strong>ÌùêÎ¶Ñ Ïú†Ìòï:</strong> {results.edge.flow_type}</p>
              <p><strong>ÎùºÎ≤®:</strong> {results.edge.label}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderEmissionForm = () => (
    <div className="space-y-6">
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-6">üå± ÏÉùÏÇ∞ Î∞∞Ï∂úÎüâ ÏÉùÏÑ±</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï†úÌíà ID <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={emissionForm.product_id}
              onChange={(e) => setEmissionForm(prev => ({ ...prev, product_id: parseInt(e.target.value) || 1 }))}
              placeholder="1"
              min="1"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Í≤ΩÍ≥Ñ ID <span className="text-red-500">*</span>
            </label>
            <Input
              type="number"
              value={emissionForm.boundary_id}
              onChange={(e) => setEmissionForm(prev => ({ ...prev, boundary_id: parseInt(e.target.value) || 1 }))}
              placeholder="1"
              min="1"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Í∞ÑÏ†ëÍ∑ÄÏÜçÎ∞∞Ï∂úÎüâ (tCO‚ÇÇ)
            </label>
            <Input
              type="number"
              value={emissionForm.dir_emission}
              onChange={(e) => setEmissionForm(prev => ({ ...prev, dir_emission: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              ÏßÅÏ†ëÍ∑ÄÏÜçÎ∞∞Ï∂úÎüâ (tCO‚ÇÇ)
            </label>
            <Input
              type="number"
              value={emissionForm.indir_emission}
              onChange={(e) => setEmissionForm(prev => ({ ...prev, indir_emission: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Ï†úÌíà Í≥†Ïú† ÎÇ¥Ïû¨Î∞∞Ï∂úÎüâ (tCO‚ÇÇ)
            </label>
            <Input
              type="number"
              value={emissionForm.see}
              onChange={(e) => setEmissionForm(prev => ({ ...prev, see: parseFloat(e.target.value) || 0 }))}
              placeholder="0"
              min="0"
              step="0.01"
              className="w-full"
            />
          </div>
        </div>

        <Button
          onClick={handleEmissionCreate}
          loading={loading}
          variant="primary"
          className="w-full md:w-auto"
        >
          ÏÉùÏÇ∞ Î∞∞Ï∂úÎüâ ÏÉùÏÑ±
        </Button>

        {results.emission && (
          <div className="mt-6 p-4 bg-teal-500/10 border border-teal-500/30 rounded-lg">
            <h4 className="font-semibold text-teal-400 mb-3">‚úÖ ÏÉùÏÇ∞ Î∞∞Ï∂úÎüâ ÏÉùÏÑ± Í≤∞Í≥º</h4>
            <div className="space-y-2 text-sm">
              <p><strong>Í≤∞Í≥º ID:</strong> {results.emission.prod_result_id}</p>
              <p><strong>Ï†úÌíà ID:</strong> {results.emission.product_id}</p>
              <p><strong>Í≤ΩÍ≥Ñ ID:</strong> {results.emission.boundary_id}</p>
              <p><strong>Í∞ÑÏ†ëÍ∑ÄÏÜçÎ∞∞Ï∂úÎüâ:</strong> {results.emission.dir_emission} tCO‚ÇÇ</p>
              <p><strong>ÏßÅÏ†ëÍ∑ÄÏÜçÎ∞∞Ï∂úÎüâ:</strong> {results.emission.indir_emission} tCO‚ÇÇ</p>
              <p><strong>Ï†úÌíà Í≥†Ïú† ÎÇ¥Ïû¨Î∞∞Ï∂úÎüâ:</strong> {results.emission.see} tCO‚ÇÇ</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-950 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">üßÆ CBAM Î∞∞Ï∂úÎüâ Í≥ÑÏÇ∞</h1>
          <p className="text-gray-300">
            Ïó∞Î£å, ÏõêÎ£å, Ï†ÑÍµ¨Î¨ºÏßàÏùò Î∞∞Ï∂úÎüâÏùÑ Í≥ÑÏÇ∞ÌïòÍ≥† CBAM ÎπÑÏö©ÏùÑ ÏÇ∞Ï∂úÌï©ÎãàÎã§
          </p>
        </div>

        {/* Tab Navigation */}
        <div className="flex flex-wrap gap-2 mb-8">
          {[
            { key: 'fuel', label: 'üî• Ïó∞Î£å Í≥ÑÏÇ∞', badge: 'Fuel' },
            { key: 'material', label: 'üß± ÏõêÎ£å Í≥ÑÏÇ∞', badge: 'Material' },
            { key: 'precursor', label: 'üî¨ Ï†ÑÍµ¨Î¨ºÏßà', badge: 'Precursor' },
            { key: 'electricity', label: '‚ö° Ï†ÑÎ†• Í≥ÑÏÇ∞', badge: 'Power' },
            { key: 'process', label: 'üè≠ Í≥µÏ†ï Í≥ÑÏÇ∞', badge: 'Process' },
            { key: 'cbam', label: 'üéØ CBAM Í≥ÑÏÇ∞', badge: 'CBAM' },
            { key: 'stats', label: 'üìä ÌÜµÍ≥Ñ', badge: 'Stats' },
            { key: 'boundary', label: 'üó∫Ô∏è Í≤ΩÍ≥Ñ', badge: 'Boundary' },
            { key: 'product', label: 'üì¶ Ï†úÌíà', badge: 'Product' },
            { key: 'operation', label: 'üè≠ Í≥µÏ†ï', badge: 'Operation' },
            { key: 'node', label: 'üîò ÎÖ∏Îìú', badge: 'Node' },
            { key: 'edge', label: 'üîó Ïó£ÏßÄ', badge: 'Edge' },
            { key: 'emission', label: 'üå± Î∞∞Ï∂úÎüâ', badge: 'Emission' }
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key as any)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${
                activeTab === tab.key
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              {tab.label}
              <span className="px-2 py-1 text-xs bg-gray-700 text-gray-300 rounded">{tab.badge}</span>
            </button>
          ))}
        </div>

        {/* Tab Content */}
        {activeTab === 'fuel' && renderFuelCalculation()}
        {activeTab === 'material' && renderMaterialCalculation()}
        {activeTab === 'precursor' && renderPrecursorCalculation()}
        {activeTab === 'electricity' && renderElectricityCalculation()}
        {activeTab === 'process' && renderProcessCalculation()}
        {activeTab === 'cbam' && renderCBAMCalculation()}
        {activeTab === 'stats' && renderStats()}
        {activeTab === 'boundary' && renderBoundaryForm()}
        {activeTab === 'product' && renderProductForm()}
        {activeTab === 'operation' && renderOperationForm()}
        {activeTab === 'node' && renderNodeForm()}
        {activeTab === 'edge' && renderEdgeForm()}
        {activeTab === 'emission' && renderEmissionForm()}

        {/* Toast */}
        {toast && (
          <div className={`fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
            toast.type === 'success' ? 'bg-green-600' :
            toast.type === 'error' ? 'bg-red-600' : 'bg-blue-600'
          } text-white`}>
            <div className="flex items-center justify-between">
              <span>{toast.message}</span>
              <button
                onClick={() => setToast(null)}
                className="ml-2 text-white hover:text-gray-200"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
